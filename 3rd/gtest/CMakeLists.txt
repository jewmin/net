# cmake版本
CMAKE_MINIMUM_REQUIRED(VERSION 3.7.2)

SET(GTEST_VERSION 1.8.1)
# Download and unpack googletest at configure time
CONFIGURE_FILE(CMakeLists.txt.in googletest-download/CMakeLists.txt)
EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" . WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/googletest-download")
EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" --build . WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/googletest-download")

# Prevent GoogleTest from overriding our compiler/linker options
# when building with Visual Studio
SET(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This adds the following targets:
# gtest, gtest_main, gmock and gmock_main
ADD_SUBDIRECTORY("${CMAKE_BINARY_DIR}/googletest-src" "${CMAKE_BINARY_DIR}/googletest-build")

SET(GTEST_ROOT_DIR ${CMAKE_BINARY_DIR}/googletest-src)

FUNCTION(_gtest_append_debugs _endvar _library)
	IF(${_library} AND ${_library}_DEBUG)
		SET(_output optimized ${${_library}} debug ${${_library}_DEBUG})
	ELSEIF(${_library})
		SET(_output ${${_library}})
	ELSE()
		SET(_output ${${_library}_DEBUG})
	ENDIF()
	SET(${_endvar} ${_output} CACHE DOC "gtest library" FORCE)
ENDFUNCTION()

FUNCTION(_gtest_find_library _name)
	FIND_LIBRARY(${_name}
		NAMES ${ARGN}
		HINTS ${OUTPUT_DIRECTORY}
		PATH_SUFFIXES lib
	)
ENDFUNCTION()

FIND_PATH(GTEST_GTEST_INCLUDE_DIR
	NAMES gtest/gtest.h
	HINTS ${gtest_SOURCE_DIR}/include
)

FIND_PATH(GTEST_GMOCK_INCLUDE_DIR
	NAMES gmock/gmock.h
	HINTS ${gmock_SOURCE_DIR}/include
)

_gtest_find_library(GTEST_GTEST_LIBRARY gtest)
_gtest_find_library(GTEST_GTEST_LIBRARY_DEBUG gtestd)
_gtest_find_library(GTEST_GMOCK_LIBRARY gmock)
_gtest_find_library(GTEST_GMOCK_LIBRARY_DEBUG gmockd)
# MESSAGE("GTEST_GTEST_LIBRARY: " ${GTEST_GTEST_LIBRARY})
# MESSAGE("GTEST_GTEST_LIBRARY_DEBUG: " ${GTEST_GTEST_LIBRARY_DEBUG})
# MESSAGE("GTEST_GMOCK_LIBRARY: " ${GTEST_GMOCK_LIBRARY})
# MESSAGE("GTEST_GMOCK_LIBRARY_DEBUG: " ${GTEST_GMOCK_LIBRARY_DEBUG})

INCLUDE(FindPackageHandleStandardArgs)
IF(GTEST_GTEST_LIBRARY AND GTEST_GTEST_LIBRARY_DEBUG)
	FIND_PACKAGE_HANDLE_STANDARD_ARGS(GTEST
		REQUIRED_VARS GTEST_ROOT_DIR GTEST_GTEST_INCLUDE_DIR GTEST_GMOCK_INCLUDE_DIR GTEST_GTEST_LIBRARY GTEST_GMOCK_LIBRARY GTEST_GTEST_LIBRARY_DEBUG GTEST_GMOCK_LIBRARY_DEBUG
		VERSION_VAR GTEST_VERSION
	)
ELSEIF(GTEST_GTEST_LIBRARY)
	FIND_PACKAGE_HANDLE_STANDARD_ARGS(GTEST
		REQUIRED_VARS GTEST_ROOT_DIR GTEST_GTEST_INCLUDE_DIR GTEST_GMOCK_INCLUDE_DIR GTEST_GTEST_LIBRARY GTEST_GMOCK_LIBRARY
		VERSION_VAR GTEST_VERSION
	)
ELSE()
	FIND_PACKAGE_HANDLE_STANDARD_ARGS(GTEST
		REQUIRED_VARS GTEST_ROOT_DIR GTEST_GTEST_INCLUDE_DIR GTEST_GMOCK_INCLUDE_DIR GTEST_GTEST_LIBRARY_DEBUG GTEST_GMOCK_LIBRARY_DEBUG
		VERSION_VAR GTEST_VERSION
	)
ENDIF()

IF(GTEST_FOUND)
	SET(GTEST_INCLUDE_DIRS ${GTEST_GTEST_INCLUDE_DIR} ${GTEST_GMOCK_INCLUDE_DIR} CACHE PATH "gtest library directory" FORCE)
	_gtest_append_debugs(GTEST_LIBRARIES GTEST_GTEST_LIBRARY)
	_gtest_append_debugs(GMOCK_LIBRARIES GTEST_GMOCK_LIBRARY)
	SET(GTEST_BOTH_LIBRARIES ${GTEST_LIBRARIES} ${GMOCK_LIBRARIES} CACHE DOC "gtest all library" FORCE)
ENDIF()