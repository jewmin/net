# cmake版本
CMAKE_MINIMUM_REQUIRED(VERSION 3.7.2)

# 项目名
PROJECT(libnet VERSION 4.4)
# MESSAGE("CMAKE_SOURCE_DIR: " ${CMAKE_SOURCE_DIR})
# MESSAGE("CMAKE_BINARY_DIR: " ${CMAKE_BINARY_DIR})
# MESSAGE("PROJECT_SOURCE_DIR: " ${PROJECT_SOURCE_DIR})
# MESSAGE("PROJECT_BINARY_DIR: " ${PROJECT_BINARY_DIR})
# MESSAGE("CMAKE_CURRENT_SOURCE_DIR: " ${CMAKE_CURRENT_SOURCE_DIR})
# MESSAGE("CMAKE_CURRENT_BINARY_DIR: " ${CMAKE_CURRENT_BINARY_DIR})

# 开关
OPTION(VLD "use Visual Leak Detector to check memory on windows" ON)
OPTION(RELEASE "compile the release version" OFF)

# 设置模块路径
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/3rd/vld)

# 平台
IF(MSVC)
	SET(WINDOWS ON)
	SET(LINUX OFF)
ELSEIF(CMAKE_COMPILER_IS_GNUCXX)
	SET(WINDOWS OFF)
	SET(LINUX ON)
	SET(VLD OFF)
ENDIF()

# 显示参数
MESSAGE(STATUS "VLD:" ${VLD})
MESSAGE(STATUS "RELEASE:" ${RELEASE})
MESSAGE(STATUS "WINDOWS:" ${WINDOWS})
MESSAGE(STATUS "LINUX:" ${LINUX})

# 添加源文件
SET(Common
	${PROJECT_SOURCE_DIR}/Common/Logger.h
	${PROJECT_SOURCE_DIR}/Common/Logger.cc
	${PROJECT_SOURCE_DIR}/Common/Allocator.h
	${PROJECT_SOURCE_DIR}/Common/Allocator.cc
	${PROJECT_SOURCE_DIR}/Common/NetObject.h
	${PROJECT_SOURCE_DIR}/Common/NetObject.cc
	${PROJECT_SOURCE_DIR}/Common/RefCountedObject.h
	${PROJECT_SOURCE_DIR}/Common/IOBuffer.h
	${PROJECT_SOURCE_DIR}/Common/BipBuffer.h
	${PROJECT_SOURCE_DIR}/Common/BipBuffer.cc
	${PROJECT_SOURCE_DIR}/Common/StraightBuffer.h
	${PROJECT_SOURCE_DIR}/Common/StraightBuffer.cc
	${PROJECT_SOURCE_DIR}/Common/ObjectMgr.h
)
SET(Address
	${PROJECT_SOURCE_DIR}/Address/AddressFamily.h
	${PROJECT_SOURCE_DIR}/Address/IPAddress.h
	${PROJECT_SOURCE_DIR}/Address/IPAddress.cc
	${PROJECT_SOURCE_DIR}/Address/IPAddressImpl.h
	${PROJECT_SOURCE_DIR}/Address/IPAddressImpl.cc
	${PROJECT_SOURCE_DIR}/Address/SocketAddress.h
	${PROJECT_SOURCE_DIR}/Address/SocketAddress.cc
	${PROJECT_SOURCE_DIR}/Address/SocketAddressImpl.h
	${PROJECT_SOURCE_DIR}/Address/SocketAddressImpl.cc
)
SET(Sockets
	${PROJECT_SOURCE_DIR}/Sockets/UvData.h
	${PROJECT_SOURCE_DIR}/Sockets/ServerSocket.h
	${PROJECT_SOURCE_DIR}/Sockets/ServerSocket.cc
	${PROJECT_SOURCE_DIR}/Sockets/ServerSocketImpl.h
	${PROJECT_SOURCE_DIR}/Sockets/ServerSocketImpl.cc
	${PROJECT_SOURCE_DIR}/Sockets/Socket.h
	${PROJECT_SOURCE_DIR}/Sockets/Socket.cc
	${PROJECT_SOURCE_DIR}/Sockets/SocketImpl.h
	${PROJECT_SOURCE_DIR}/Sockets/SocketImpl.cc
	${PROJECT_SOURCE_DIR}/Sockets/StreamSocket.h
	${PROJECT_SOURCE_DIR}/Sockets/StreamSocket.cc
	${PROJECT_SOURCE_DIR}/Sockets/StreamSocketImpl.h
	${PROJECT_SOURCE_DIR}/Sockets/StreamSocketImpl.cc
)
SET(Reactor
	${PROJECT_SOURCE_DIR}/Reactor/ConnectState.h
	${PROJECT_SOURCE_DIR}/Reactor/EventHandler.h
	${PROJECT_SOURCE_DIR}/Reactor/EventHandler.cc
	${PROJECT_SOURCE_DIR}/Reactor/EventReactor.h
	${PROJECT_SOURCE_DIR}/Reactor/EventReactor.cc
	${PROJECT_SOURCE_DIR}/Reactor/SocketAcceptor.h
	${PROJECT_SOURCE_DIR}/Reactor/SocketAcceptor.cc
	${PROJECT_SOURCE_DIR}/Reactor/SocketConnection.h
	${PROJECT_SOURCE_DIR}/Reactor/SocketConnection.cc
	${PROJECT_SOURCE_DIR}/Reactor/SocketConnector.h
	${PROJECT_SOURCE_DIR}/Reactor/SocketConnector.cc
)
SET(Interface
	${PROJECT_SOURCE_DIR}/Interface/INotification.h
	${PROJECT_SOURCE_DIR}/Interface/Client.h
	${PROJECT_SOURCE_DIR}/Interface/Client.cc
	${PROJECT_SOURCE_DIR}/Interface/Connection.h
	${PROJECT_SOURCE_DIR}/Interface/Connection.cc
	${PROJECT_SOURCE_DIR}/Interface/Server.h
	${PROJECT_SOURCE_DIR}/Interface/Server.cc
	${PROJECT_SOURCE_DIR}/Interface/ConnectionMgr.h
	${PROJECT_SOURCE_DIR}/Interface/ConnectionMgr.cc
	${PROJECT_SOURCE_DIR}/Interface/AppService.h
	${PROJECT_SOURCE_DIR}/Interface/AppService.cc
	${PROJECT_SOURCE_DIR}/Interface/Interface.cc
)

SET(all_srcs
	${PROJECT_SOURCE_DIR}/Net.h
	${Common}
	${Address}
	${Sockets}
	${Reactor}
	${Interface}
)
# MESSAGE(${all_srcs})

# 生成目录结构
SOURCE_GROUP(Common FILES ${Common})
SOURCE_GROUP(Address FILES ${Address})
SOURCE_GROUP(Sockets FILES ${Sockets})
SOURCE_GROUP(Reactor FILES ${Reactor})
SOURCE_GROUP(Interface FILES ${Interface})

# 设置输出目录
SET(CMAKE_DEBUG_POSTFIX "d")
SET(CMAKE_SUPPRESS_REGENERATION true)
SET(OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output)
SET(OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIRECTORY})
SET(OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIRECTORY})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIRECTORY_DEBUG})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIRECTORY_DEBUG})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIRECTORY_DEBUG})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIRECTORY_RELEASE})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIRECTORY_RELEASE})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIRECTORY_RELEASE})

# 编译项
IF(WINDOWS)
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
	ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_WARNINGS)
	ADD_COMPILE_OPTIONS(/utf-8)
ELSEIF(LINUX)
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -Wall -ggdb")
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2 -Wall")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -std=c++11")
	ADD_DEFINITIONS(-m64)
ENDIF()

# 显式输出编译选项
IF(RELEASE)
	SET(CMAKE_BUILD_TYPE Release)
	MESSAGE(STATUS "flags:" ${CMAKE_CXX_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS})
ELSE()
	SET(CMAKE_BUILD_TYPE Debug)
	MESSAGE(STATUS "flags:" ${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS})
ENDIF()

# 第三方类库
ADD_SUBDIRECTORY(3rd/gtest ${CMAKE_BINARY_DIR}/../gtest)
ADD_SUBDIRECTORY(3rd/libuv ${CMAKE_BINARY_DIR}/../libuv)

# 头文件
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
INCLUDE_DIRECTORIES(${LIBUV_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})

# 库目录
LINK_DIRECTORIES(${OUTPUT_DIRECTORY})

# vld
IF(VLD)
	FIND_PACKAGE(VLD)
	IF(VLD_FOUND)
		ADD_DEFINITIONS(-DUSE_VLD)
		INCLUDE_DIRECTORIES(${VLD_INCLUDE_DIRS})
	ENDIF()
ENDIF()

# 生成静态库、动态库
ADD_LIBRARY(net-static STATIC ${all_srcs})
ADD_LIBRARY(net SHARED ${all_srcs})
ADD_DEPENDENCIES(net-static uv)
ADD_DEPENDENCIES(net uv)
IF(WINDOWS)
	TARGET_LINK_LIBRARIES(net ws2_32 iphlpapi psapi userenv ${LIBUV_LIBRARIES})
	TARGET_COMPILE_DEFINITIONS(net PRIVATE BUILDING_NET_SHARED)
ELSEIF(LINUX)
	TARGET_COMPILE_OPTIONS(net PRIVATE -fPIC -fvisibility=hidden)
ENDIF()

# 添加单元测试项目、压测项目
ADD_SUBDIRECTORY(TestSuite)
# ADD_SUBDIRECTORY(Test)