# cmake版本
CMAKE_MINIMUM_REQUIRED(VERSION 3.7.2)

# 项目名
PROJECT(test_suite VERSION 1.5.1)
# MESSAGE("CMAKE_SOURCE_DIR: " ${CMAKE_SOURCE_DIR})
# MESSAGE("CMAKE_BINARY_DIR: " ${CMAKE_BINARY_DIR})
# MESSAGE("PROJECT_SOURCE_DIR: " ${PROJECT_SOURCE_DIR})
# MESSAGE("PROJECT_BINARY_DIR: " ${PROJECT_BINARY_DIR})
# MESSAGE("CMAKE_CURRENT_SOURCE_DIR: " ${CMAKE_CURRENT_SOURCE_DIR})
# MESSAGE("CMAKE_CURRENT_BINARY_DIR: " ${CMAKE_CURRENT_BINARY_DIR})

# 添加源文件
SET(test_srcs
	${PROJECT_SOURCE_DIR}/Main.cc
	${PROJECT_SOURCE_DIR}/AllocatorTestSuite.cc
	${PROJECT_SOURCE_DIR}/LoggerTestSuite.cc
	${PROJECT_SOURCE_DIR}/RefCountedObjectTestSuite.cc
	${PROJECT_SOURCE_DIR}/IOBufferTestSuite.cc
	${PROJECT_SOURCE_DIR}/NetObjectTestSuite.cc
	${PROJECT_SOURCE_DIR}/ObjectMgrTestSuite.cc
	${PROJECT_SOURCE_DIR}/IPAddressTestSuite.cc
	${PROJECT_SOURCE_DIR}/SocketAddressTestSuite.cc
	${PROJECT_SOURCE_DIR}/SocketTestSuite.cc
	${PROJECT_SOURCE_DIR}/ReactorTestSuite.cc
)
# AUX_SOURCE_DIRECTORY(${PROJECT_SOURCE_DIR} test_srcs)
# MESSAGE(${test_srcs})

# gtest
INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})

# vld
IF(VLD)
	FIND_PACKAGE(VLD)
	IF(VLD_FOUND)
		ADD_DEFINITIONS(-DUSE_VLD)
		INCLUDE_DIRECTORIES(${VLD_INCLUDE_DIRS})
	ENDIF()
ENDIF()

# 生成可执行文件
ADD_EXECUTABLE(${PROJECT_NAME} ${test_srcs})
IF(WINDOWS)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} libnet-static ws2_32 iphlpapi psapi userenv libuv ${GTEST_BOTH_LIBRARIES} ${VLD_LIBRARIES})
	IF(RELEASE)
		ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${VLD_DLL_FILE} ${GTEST_DLL_FILE_RELEASE} ${UV_DLL_FILE_RELEASE} ${OUTPUT_DIRECTORY_RELEASE})
	ELSE()
		ADD_CUSTOM_COMMAND(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_if_different ${VLD_DLL_FILE} ${GTEST_DLL_FILE_DEBUG} ${UV_DLL_FILE_DEBUG} ${OUTPUT_DIRECTORY_DEBUG})
	ENDIF()
ELSEIF(LINUX)
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} net-static uv ${GTEST_BOTH_LIBRARIES})
ENDIF()